// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package oto


import com.trueaccord.scalapb.Descriptors

@SerialVersionUID(0L)
final case class Person(
    name: Option[String] = None,
    id: Option[Int] = None,
    email: Option[String] = None
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Person] with com.trueaccord.lenses.Updatable[Person] {
    @transient
    lazy val serializedSize: Int = {
      var __size = 0
      if (name.isDefined) { __size += com.google.protobuf.CodedOutputStream.computeStringSize(1, name.get) }
      if (id.isDefined) { __size += com.google.protobuf.CodedOutputStream.computeInt32Size(2, id.get) }
      if (email.isDefined) { __size += com.google.protobuf.CodedOutputStream.computeStringSize(3, email.get) }
      __size
    }
    def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
      name.foreach { v => 
        output.writeString(1, v)
      }
      id.foreach { v => 
        output.writeInt32(2, v)
      }
      email.foreach { v => 
        output.writeString(3, v)
      }
    }
    def mergeFrom(__input: com.google.protobuf.CodedInputStream): oto.Person = {
      var __name = this.name
      var __id = this.id
      var __email = this.email
      var _done__ = false
      while (!_done__) {
        val _tag__ = __input.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __name = Some(__input.readString())
          case 16 =>
            __id = Some(__input.readInt32())
          case 26 =>
            __email = Some(__input.readString())
          case tag => __input.skipField(tag)
        }
      }
      oto.Person(
          name = __name,
          id = __id,
          email = __email
      )
    }
    def getName: String = name.getOrElse("")
    def clearName: Person = copy(name = None)
    def withName(__v: String): Person = copy(name = Some(__v))
    def getId: Int = id.getOrElse(0)
    def clearId: Person = copy(id = None)
    def withId(__v: Int): Person = copy(id = Some(__v))
    def getEmail: String = email.getOrElse("")
    def clearEmail: Person = copy(email = None)
    def withEmail(__v: String): Person = copy(email = Some(__v))
    def getField(__field: Descriptors.FieldDescriptor): Any = {
      __field.number match {
        case 1 => name
        case 2 => id
        case 3 => email
      }
    }
    def companion = oto.Person
}

object Person extends com.trueaccord.scalapb.GeneratedMessageCompanion[Person]  {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Person]  = this
  def fromFieldsMap(fieldsMap: Map[Int, Any]): oto.Person = oto.Person(
    name = fieldsMap.getOrElse(1, None).asInstanceOf[Option[String]],
    id = fieldsMap.getOrElse(2, None).asInstanceOf[Option[Int]],
    email = fieldsMap.getOrElse(3, None).asInstanceOf[Option[String]]
  )
  lazy val descriptor = new Descriptors.MessageDescriptor("Person", this,
    None, m = Seq(),
    e = Seq(),
    f = oto.InternalFields_otoProto.internalFieldsFor("oto.Person"))
  lazy val defaultInstance = oto.Person(
  )
  implicit class PersonLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, Person]) extends com.trueaccord.lenses.ObjectLens[UpperPB, Person](_l) {
    def name: com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getName)((c_, f_) => c_.copy(name = Some(f_)))
    def optionalName: com.trueaccord.lenses.Lens[UpperPB, Option[String]] = field(_.name)((c_, f_) => c_.copy(name = f_))
    def id: com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getId)((c_, f_) => c_.copy(id = Some(f_)))
    def optionalId: com.trueaccord.lenses.Lens[UpperPB, Option[Int]] = field(_.id)((c_, f_) => c_.copy(id = f_))
    def email: com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getEmail)((c_, f_) => c_.copy(email = Some(f_)))
    def optionalEmail: com.trueaccord.lenses.Lens[UpperPB, Option[String]] = field(_.email)((c_, f_) => c_.copy(email = f_))
  }
  final val NAME_FIELD_NUMBER = 1
  final val ID_FIELD_NUMBER = 2
  final val EMAIL_FIELD_NUMBER = 3
}
